02 The Database abstraction Layer

importer.py

line 3556

``
for line in open('/tmp/data.txt','r'):
    fullname,salary = line.strip().split('|')
    first_name,last_name = fullname.split(' ')
    db.employees.insert(first_name=first_name,
                       last_name=last_name,
                       salary=float(salary))
db.commit()
``:code_python

04 Moving you data

script mover.py

line 3633

``
def main():
    other_db = DAL(URI)
    print 'creating tables...'
    for table in db:
        other_db.define_table(table._tablename,*[field for field in table])
    print 'exporting data...'
    db.export_to_csv_file(open('tmp.sql','wb'))
    print 'importing data...'
    other_db.import_from_csv_file(open('tmp.sql','rb'))
    other_db.commit()
    print 'done!'

if __name__() == "__main__":
    main()
``

06 efficient search by tags

model code (search functions):

line 3834

``
def search_or(data=db.data, tag=db.tag,link=db.link,tags=[]):
    subquery = db(db.tag.name.belongs(tags)).select(db.tag.id)
    rows = db(data.id==link.record_id)\
             (link.tag_id.belongs(subquery)).select(
                   data.ALL,
                   orderby=data.id,
                   groupby=data.id,
                   distinct=True)
    return rows

def search_and(data=db.data, tag=db.tag, link=db.link, tags=[]):
    n = len(tags)
    subquery = db(db.tag.name.belongs(tags)).select(db.tag.id)
    rows = db(data.id==link.record_id)\
             (link.tag_id.belongs(subquery)).select(
                   data.ALL,
                   orderby=data.id,
                   groupby=data.id,
                   having=data.id.count()==n)
    return rows
``:code_python


08 Hierarchical category tree

line: 3949


``
from gluon.dal import Table

class TreeProxy(object):
    skeleton = Table(None,'tree',
                     Field('ileft','integer'),
                     Field('iright','integer'))
    def __init__(self,table):
        self.table=table
    def ancestors(self,node):
        db = self.table._db
        return db(self.table.ileft<=node.ileft)(self.table.iright>node.iright)
    def descendants(self,node):
        db = self.table._db
        return db(self.table.ileft>=node.ileft)(self.table.iright<node.iright)
    def add_leaf(self,parent_id=None,**fields):
        if not parent_id:
            nrecords = self.table._db(self.table).count()
            fields.update(dict(ileft=nrecords,iright=nrecords))
        else:
            node = self.table(parent_id)
            fields.update(dict(ileft=node.iright,iright=node.iright))
            node.update_record(iright=node.iright+1)
            ancestors = self.ancestors(node).select()
            for ancestor in ancestors:
                ancestor.update_record(iright=ancestor.iright+1)
                ancestors = self.ancestors(node).select()
            for ancestor in ancestors:
                ancestor.update_record(iright=ancestor.iright+1)
        return self.table.insert(**fields)

    def del_node(self,node):
        delta = node.iright-node.ileft
        deleted = self.descendants(node).delete()
        db = self.table._db
        db(self.table.iright>node.iright).update(iright=self.table.iright-delta)
        del self.table[node.id]
        return deleted + 1
``:code_python



line 3992

``
treeproxy = TreeProxy(db.define_table('mytree',Field('name'),Tree.skeleton))
``:code_python
