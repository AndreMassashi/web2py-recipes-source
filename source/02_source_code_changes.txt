01 Improving the scaffolding application

0.py

line: 1517

``
from gluon.storage import Storage
settings = Storage()

settings.production = False

if settings.production:
   settings.db_uri = 'sqlite://production.sqlite'
   settings.migrate = False
else:
   settings.db_uri = 'sqlite://development.sqlite'
   settings.migrate = True

settings.title = request.application
settings.subtitle = 'write something here'
settings.author = 'you'
settings.author_email = 'you@example.come'
settings.keywords = ''
settings.description = ''
settings.layout_theme = 'Default'
settings.security_key = 'a098c897-724b-4e05-b2d8-8ee993385ae6'
settings.email_server = 'localhost'
settings.email_sender = 'you@example.com'
settings.email_login = ''
settings.login_method = 'local'
settings.login_config = ''
``:code_python

db.py

line: 1548

``
from gluon.tools import *

db = DAL(settings.db_uri)
if settings.db_uri.startswith('gae'):
    session.connect(request, response, db = db)

mail = Mail()                                  # mailer
auth = Auth(db)                      # authentication/authorization
crud = Crud(db)                      # for CRUD helpers using auth
service = Service()                  # for json, xml, jsonrpc, xmlrpc, amfrpc
plugins = PluginManager()

# enable generic views for all actions for testing purpose
response.generic_patterns = ['*']

mail.settings.server = settings.email_server
mail.settings.sender = settings.email_sender
mail.settings.login = settings.email_login
auth.settings.hmac_key = settings.security_key

# add any extra fields you may want to add to auth_user
auth.settings.extra_fields['auth_user'] = []

# user username as well as email
auth.define_tables(migrate=settings.migrate,username=True)
auth.settings.mailer = mail
auth.settings.registration_requires_verification = False
auth.settings.registration_requires_approval = False
auth.messages.verify_email = 'Click on the link http://'+request.env.http_host+URL('default','user', args=['verify_email'])+'/%(key)s to verify your email'
auth.settings.reset_password_requires_verification = True
auth.messages.reset_password = 'Click on the link http://'+request.env.http_host+URL('default','user', args=['reset_password'])+'/%(key)s to reset your password'

if settings.login_method=='janrain':
   from gluon.contrib.login_methods.rpx_account import RPXAccount
   auth.settings.actions_disabled=['register', 'change_password', 'request_reset_password']
   auth.settings.login_form = RPXAccount(request,
       api_key = settings.login_config.split(':')[-1],
       domain = settings.login_config.split(':')[0],
       url = "http://%s/%s/default/user/login" % \
             (request.env.http_host, request.application))
``:code_python


02 building_a_simple_contacts_application

contact_logs.html

line 1884

``
{{extend 'layout.html'}}
<h2>Logs for contact {{=contact.name}}</h2>
<table>
  {{for log in logs:}}
  <tr>
    <td>{{=log.posted_on}}</td>
    <td>{{=MARKMIN(log.body)}}</td>
  </tr>
  {{pass}}
  <tr>
    <td></td>
    <td>{{=form}}</td>
  </tr>
</table>
``:code_html


03 building a reddit clone

line 2082

news.html"

``
{{extend 'layout.html'}}
<h2>News at {{=category.name}}</h2>
<table>
  {{for news in news:}}
  <tr>
    <td>{{=A(news.title, _href=news.link)}}</td>
    <td>{{=A('comments', _href=URL('news_comments', args=news.id))}}</td>
    <td>{{=A('edit', _href=URL('news_edit', args=news.id))}}</td>
  </tr>
  {{pass}}
  <tr>
    <td>{{=A('post news item', _href=URL('news_create', args=category.id))}}</td>
    <td></td>
  </tr>
</table>
``:code_html


default.py

line: 2014

``
def index():
    return locals()

def categories():
    categories = db(db.category).select(orderby=db.category.name)
    return locals()

def news():
    category = db.category(request.args(0)) or redirect(URL('categories'))
    news = db(db.news.category==category.id).select(
               orderby=~db.news.votes, limitby=(0, 25))
    return locals()

@auth.requires_membership('manager')
def category_create():
    form = crud.create(db.category, next='categories')
    return locals()

@auth.requires_membership('manager')
def category_edit():
    category = db.category(request.args(0)) or redirect(URL('categories'))
    form = crud.update(db.category, category, next='categories')
    return locals()

@auth.requires_login()
def news_create():
    db.news.category.default = request.args(0)
    db.news.votes.default = 0
    form = crud.create(db.news, next='news_comments/[id]')
    return locals()

@auth.requires_login()
def news_edit():
    news = db.news(request.args(0)) or redirect(URL('categories'))
    if not news.posted_by==auth.user.id: redirect(URL('not_authorized'))
    form = crud.update(db.news, category, next='news_comments/[id]')
    return locals()

def news_comments():
    news = db.news(request.args(0)) or redirect(URL('categories'))
    if auth.user:
        db.comment.news.default = news.id
        db.comment.posted_on.default = request.now
        db.comment.posted_by.default = auth.user.id
        form = crud.create(db.comment)
    comments = db(db.comment.news==news.id).select(
                       orderby=db.comment.posted_on)
    return locals()

@auth.requires_login()
def vote():
    if not request.env.request_method=='POST': raise HTTP(400)
    news_id, mode = request.args(0), request.args(1)
    news = db.news(id=news_id)
    vote = db.vote(posted_by=auth.user.id, news=news_id)
    votes = news.votes
    value = (mode=='plus') and +1 or -1
    if vote and value*vote.value==1:
        message = 'you voted already'
    else:
        if vote:
            votes += value - vote.value
            vote.update_record(value=value)
        else:
            votes += value
            db.vote.insert(value=value, posted_by=auth.user.id,
                           posted_on=request.now, news=news_id)
        news.update_record(votes=votes)
        message = 'vote recorded'
    return "jQuery('#votes').html('%s');jQuery('.flash').html('%s').slideDown();" % (votes, message)
``:code_python


06 semi-static site

flatpage.py

``
def flatpage():
    # define languages that don't need translation:
    T.current_languages = ['en', 'en-en']

    # select user specified language (via session or browser config)
    if session.lang:
        lang = session.lang
    elif T.accepted_language is not None:
        lang = T.accepted_language[:2]
    else:
        lang = "en"
    T.force(lang)

    title = subtitle = body = ""
    flatpage_id = None
    form = ''
    view = DEFAULT_FLATPAGE_VIEW

    if request.vars and auth.user and auth.user.email==FLATPAGES_ADMIN:
        # create a form to edit the page:
        record = db.flatpage(request.get_vars.id)
        form = SQLFORM(db.flatpage, record)
        if form.accepts(request, session):
            response.flash = T("Page saved")
        elif form.errors:
            response.flash = T("Errors!")
        else:
            response.flash = T("Edit Page")

    if not form:
        # search flatpage according to the current request
        query = db.flatpage.c==request.controller
        query &= db.flatpage.f==request.function
        if request.args:
            query &= db.flatpage.args==request.args(0)
        else:
            query &= (db.flatpage.args==None)|(db.flatpage.args=='')
        query &= db.flatpage.lang==lang
        # execute the query, fetch one record (if any)
        flatpage = db(query).select(orderby=~db.flatpage.created_on,
           limitby=(0, 1), cache=(cache.ram, 60)).first()
        if flatpage:
            flatpage_id = flatpage.id
            title = flatpage.title
            subtitle = flatpage.subtitle
            body = flatpage.body
            view = flatpage.view
        else:
            response.flash = T("Page Not Found!")
        if auth.user and auth.user.email==FLATPAGES_ADMIN:
            # if user is authenticated, show edit button:
            form = A(T('edit'), _href=URL(vars=dict(id=flatpage_id)))

    # render the page:
    response.title = title
    response.subtitle = subtitle
    response.view = view
    body = XML(body)
    return dict(body=body, form=form)
``:code_python



13 Design modular Applications

incomplete

line 3203 default.py

``
def index():
    "index will load the list and the create/edit forms as components"
    return dict()

def list_items():
    """ shows a list of items that were created
        each items is clickable and can be edited """
    rows = db(db.mytable.id>0).select()
    return dict(rows=rows)

def edit_item():
    """ return a creation form if no item is specified,
        return an edit form if the item is known """
    def display_changed(data):
        response.ajax =  \
           'web2py_component("%s","show_itemlist")' % URL('showitems')
    form = crud.update(db.mytable, request.args(0),onaccept=display_changed)
    return form
``:code_python


14 speed downloads

line: 3322

url for fast download (

``
URL('fast_download', args='filename')
``:code_python
